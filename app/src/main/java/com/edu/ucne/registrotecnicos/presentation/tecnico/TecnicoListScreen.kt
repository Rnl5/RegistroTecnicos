package com.edu.ucne.registrotecnicos.presentation.tecnicoimport androidx.compose.foundation.clickableimport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.Rowimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.requiredWidthimport androidx.compose.foundation.lazy.LazyColumnimport androidx.compose.foundation.lazy.itemsimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.filled.Deleteimport androidx.compose.material.icons.filled.Faceimport androidx.compose.material.icons.filled.Personimport androidx.compose.material3.Dividerimport androidx.compose.material3.DrawerValueimport androidx.compose.material3.Iconimport androidx.compose.material3.IconButtonimport androidx.compose.material3.MaterialThemeimport androidx.compose.material3.ModalDrawerSheetimport androidx.compose.material3.ModalNavigationDrawerimport androidx.compose.material3.NavigationDrawerItemimport androidx.compose.material3.Scaffoldimport androidx.compose.material3.Textimport androidx.compose.material3.rememberDrawerStateimport androidx.compose.material3.surfaceColorAtElevationimport androidx.compose.runtime.Composableimport androidx.compose.runtime.getValueimport androidx.compose.runtime.mutableStateListOfimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.rememberimport androidx.compose.runtime.rememberCoroutineScopeimport androidx.compose.runtime.setValueimport androidx.compose.ui.Modifierimport androidx.compose.ui.res.painterResourceimport androidx.compose.ui.text.TextStyleimport androidx.compose.ui.text.font.FontWeightimport androidx.compose.ui.tooling.preview.Previewimport androidx.compose.ui.unit.dpimport androidx.lifecycle.compose.collectAsStateWithLifecycleimport androidx.navigation.NavHostControllerimport androidx.navigation.compose.rememberNavControllerimport com.edu.ucne.registrotecnicos.Screenimport com.edu.ucne.registrotecnicos.data.local.database.TecnicoDbimport com.edu.ucne.registrotecnicos.data.local.entities.TecnicoEntityimport com.edu.ucne.registrotecnicos.presentation.components.BotonAgregarFlotanteTextoimport com.edu.ucne.registrotecnicos.presentation.components.TopAppBarimport com.edu.ucne.registrotecnicos.ui.theme.RegistroTecnicosThemeimport kotlinx.coroutines.launch@Composablefun TecnicoListScreen(    viewModel: TecnicoViewModel,    onVerTecnico: (TecnicoEntity) -> Unit,    navController: NavHostController,    onAgregarTecnico: () -> Unit) {    val tecnicos by viewModel.tecnicos.collectAsStateWithLifecycle()    var tecnicoSeleccionado by remember { mutableStateOf<TecnicoEntity?>(null) }    val scope = rememberCoroutineScope()    TecnicoListBody(        tecnicos = tecnicos,        onVerTecnico = onVerTecnico,        onDeleteTecnico = { tecnico ->            scope.launch {                viewModel.deleteTecnico(tecnico)            }        },        navController = navController,        onAgregarTecnico = onAgregarTecnico    )}@Composablefun TecnicoListBody(    tecnicos: List<TecnicoEntity>,    onVerTecnico: (TecnicoEntity) -> Unit,    onDeleteTecnico: (TecnicoEntity) -> Unit,    navController: NavHostController,    onAgregarTecnico: () -> Unit) {    val scope = rememberCoroutineScope()    var drawerState = rememberDrawerState(initialValue = DrawerValue.Closed)    ModalNavigationDrawer(        drawerContent = {            ModalDrawerSheet(Modifier.requiredWidth(220.dp)) {                Text(                    text = "Tipos de tecnicos",                    modifier = Modifier.padding(16.dp)                )                Divider()                NavigationDrawerItem(                    label = { Text(text = "Tecnicos") },                    selected = false,                    onClick = { navController.navigate(Screen.TecnicoList) },                    icon = {                        Icon(                            imageVector = Icons.Default.Person,                            contentDescription = "Tipos de Tecnicos"                        )                    }                )                Divider()                NavigationDrawerItem(                    label = { Text(text = "Tipos de tecnicos") },                    selected = false,                    onClick = { navController.navigate(Screen.TipoTecnicoList) },                    icon = {                        Icon(                            imageVector = Icons.Default.Face,                            contentDescription = "Tipos de Tecnicos"                        )                    }                )            }        },        drawerState = drawerState    ) {        Scaffold(            modifier = Modifier.fillMaxSize(),            topBar = {                TopAppBar(                    title = "Tecnicos",                    onTopBarClick = {                        scope.launch {                            drawerState.open()                        }                    }                )            },            floatingActionButton = {                BotonAgregarFlotanteTexto(                    title = "Agregar Tecnico" ,                    onAgregarTecnico)            }        ) { innerPadding ->            Column(                modifier = Modifier                    .fillMaxSize()                    .padding(innerPadding)                    .padding(4.dp)            ) {                LazyColumn(                    modifier = Modifier                        .fillMaxSize()                ) {                    items(tecnicos) { tecnico ->                        Row(                            modifier = Modifier                                .fillMaxWidth()                                .clickable { onVerTecnico(tecnico) }                                .padding(16.dp)                        ) {                            Text(                                text = tecnico.tecnicoId.toString(),                                modifier = Modifier.weight(0.10f)                            )                            Text(text = tecnico.nombres.toString(), modifier = Modifier.weight(0.40f))                            Text(text = tecnico.sueldoHora.toString(), modifier = Modifier.weight(0.30f))                            Text(text = tecnico.tipoT.toString(), modifier = Modifier.weight(0.40f))                            IconButton(                                onClick = { onDeleteTecnico(tecnico) }                            ) {                                Icon(                                    imageVector = Icons.Default.Delete,                                    contentDescription = "Eliminar tecnico"                                )                            }                        }                    }                }            }        }    }}@Preview@Composableprivate fun TecnicoListPreview() {    val tecnicos = listOf(        TecnicoEntity(            nombres = "Ronell Jesus",            sueldoHora = 27950.0        )    )    RegistroTecnicosTheme {        TecnicoListBody(            tecnicos = tecnicos,            onVerTecnico = {},            onDeleteTecnico = {},            navController = rememberNavController(),            onAgregarTecnico = {}        )    }}